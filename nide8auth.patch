diff --git a/authlib-injector.example.yaml b/authlib-injector.example.yaml
deleted file mode 100644
index 225ebdf..0000000
--- a/authlib-injector.example.yaml
+++ /dev/null
@@ -1,50 +0,0 @@
-# authlib-injector配置文件模板
-# 该文件仅作为参考, 请不要复制粘贴该文件中的内容
-
-# 配置文件查找顺序
-#   authlib-injector会按照以下顺序搜索配置文件, 并使用第一个找到的
-#   - 以javaagent方式启动时指定的参数
-#       例如通过 -javaagent:authlib-injector.jar=my-authlib-injector.yaml
-#       指定 my-authlib-injector.yaml 为配置文件
-#   - org.to2mbn.authlibinjector.config 属性
-#       例如 -Dorg.to2mbn.authlibinjector.config=my-authlib-injector.yaml
-#   - JAR中的 /authlib-injector.yaml 文件
-#   - 当前目录下的 authlib-injector.yaml 文件
-
-# 是否开启调试模式
-#   开启后会将修改过的字节码存于当前目录下名为
-#   {className}_modified.class 的文件中
-debug: false
-
-# API路径
-#   对于如下格式的MojangAPI: https://{subdomain}.mojang.com/{path}
-#   将会被替换为: {apiRoot}{subdomain}/{path}
-#
-#   例如, apiRoot为 https://yggdrasil.example.com/
-#   则 https://sessionserver.mojang.com/session/minecraft/join
-#   会被替换为 https://yggdrasil.example.com/sessionserver/session/minecraft/join
-apiRoot: https://yggdrasil.example.com/
-
-# 加入皮肤白名单的域名后缀
-#   只有以 .minecraft.net, .mojang.com,
-#   或以下列表中任一元素为后缀的域名才能提供材质
-skinWhitelistDomains:
-  - .example.com
-
-# 用于验证profile properties的公钥
-#   如果不想进行公钥替换, 可将该属性删除
-publicKey: |-
-  -----BEGIN PUBLIC KEY-----
-  MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAylB4B6m5lz7jwrcFz6Fd
-  /fnfUhcvlxsTSn5kIK/2aGG1C3kMy4VjhwlxF6BFUSnfxhNswPjh3ZitkBxEAFY2
-  5uzkJFRwHwVA9mdwjashXILtR6OqdLXXFVyUPIURLOSWqGNBtb08EN5fMnG8iFLg
-  EJIBMxs9BvF3s3/FhuHyPKiVTZmXY0WY4ZyYqvoKR+XjaTRPPvBsDa4WI2u1zxXM
-  eHlodT3lnCzVvyOYBLXL6CJgByuOxccJ8hnXfF9yY4F0aeL080Jz/3+EBNG8RO4B
-  yhtBf4Ny8NQ6stWsjfeUIvH7bU/4zCYcYOq4WrInXHqS8qruDmIl7P5XXGcabuzQ
-  stPf/h2CRAUpP/PlHXcMlvewjmGU6MfDK+lifScNYwjPxRo4nKTGFZf/0aqHCh/E
-  AsQyLKrOIYRE0lDG3bzBh8ogIMLAugsAfBb6M3mqCqKaTMAf/VAjh5FFJnjS+7bE
-  +bZEV0qwax1CEoPPJL1fIQjOS8zj086gjpGRCtSy9+bTPTfTR/SJ+VUB5G2IeCIt
-  kNHpJX2ygojFZ9n5Fnj7R9ZnOM+L8nyIjPu3aePvtcrXlyLhH/hvOfIOjPxOlqW+
-  O5QwSFP4OEcyLAUgDdUgyW36Z5mB285uKW/ighzZsOTevVUG2QwDItObIV6i8RCx
-  FbN2oDHyPaO5j1tTaBNyVt8CAwEAAQ==
-  -----END PUBLIC KEY-----
diff --git a/build.gradle b/build.gradle
index d236554..f21c27e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -11,7 +11,7 @@ repositories {
 
 dependencies {
 	compile 'org.ow2.asm:asm:5.2'
-	compile 'org.yaml:snakeyaml:1.18'
+	//compile 'org.yaml:snakeyaml:1.18'
 	compileOnly ('net.minecraft:launchwrapper:1.12') {
 		transitive = false
 	}
@@ -19,7 +19,7 @@ dependencies {
 }
 
 sourceCompatibility = 1.8
-version = '1.0.' + (System.getenv('BUILD_NUMBER')?:'0-SNAPSHOT') + '-' + versionDetails().gitHash[0..6]
+version = '1.0'
 
 jar {
 	manifest {
diff --git a/src/main/java/org/to2mbn/authlibinjector/AuthlibInjector.java b/src/main/java/org/to2mbn/authlibinjector/AuthlibInjector.java
index a43e8bc..6e6d458 100644
--- a/src/main/java/org/to2mbn/authlibinjector/AuthlibInjector.java
+++ b/src/main/java/org/to2mbn/authlibinjector/AuthlibInjector.java
@@ -21,7 +21,7 @@ import org.to2mbn.authlibinjector.internal.org.json.JSONException;
 import org.to2mbn.authlibinjector.internal.org.json.JSONObject;
 import org.to2mbn.authlibinjector.internal.org.json.JSONTokener;
 import org.to2mbn.authlibinjector.transform.ClassTransformer;
-import org.yaml.snakeyaml.Yaml;
+import java.util.Properties;
 
 public final class AuthlibInjector {
 
@@ -37,6 +37,8 @@ public final class AuthlibInjector {
 
 	public static void bootstrap(Consumer<ClassFileTransformer> transformerRegistry) {
 		InjectorConfig config = loadConfig();
+		if(config == null)
+			return;
 		ClassTransformer transformer = new ClassTransformer();
 
 		if (config.isDebug()) transformer.debug = true;
@@ -49,50 +51,33 @@ public final class AuthlibInjector {
 	}
 
 	private static InjectorConfig loadConfig() {
-		Optional<InjectorConfig> remoteConfig = tryRemoteConfig();
-		if (remoteConfig.isPresent()) return remoteConfig.get();
-
-		try (Reader reader = new InputStreamReader(lookupConfig(), StandardCharsets.UTF_8)) {
-			Yaml yaml = new Yaml();
-			return yaml.loadAs(reader, InjectorConfig.class);
-		} catch (IOException e) {
-			throw new UncheckedIOException(e);
-		}
-	}
-
-	private static InputStream lookupConfig() throws IOException {
-		String configProperty = System.getProperty("org.to2mbn.authlibinjector.config");
-		if (configProperty != null && !configProperty.startsWith("@")) {
-			Path configFile = Paths.get(configProperty);
-			if (!Files.exists(configFile)) {
-				log("file not exists: {0}", configProperty);
-			} else {
-				log("using config: " + configProperty);
-				return Files.newInputStream(configFile);
+		Path currentConfigFile = Paths.get("nide8auth.txt");
+		if (Files.exists(currentConfigFile)) {
+			Properties pps = new Properties();
+			try {
+				InputStream in = Files.newInputStream(currentConfigFile);
+				pps.load(in);
+				String value = pps.getProperty("serverid");
+				if (value != null && !value.isEmpty()) {
+					System.setProperty("server.uuid", value);
+				}
+			}catch (IOException e) {
+				e.printStackTrace();
+				log("can not read config from nide8auth.txt");
 			}
 		}
-
-		InputStream packedConfig = AuthlibInjector.class.getResourceAsStream("/authlib-injector.yaml");
-		if (packedConfig != null) {
-			log("using config: jar:/authlib-injector.yaml");
-			return packedConfig;
-		}
-
-		Path currentConfigFile = Paths.get("authlib-injector.yaml");
-		if (!Files.exists(currentConfigFile)) {
-			throw new FileNotFoundException("no config is found");
-		} else {
-			log("using config: ./authlib-injector.yaml");
-			return Files.newInputStream(currentConfigFile);
-		}
+		Optional<InjectorConfig> remoteConfig = tryRemoteConfig();
+		if (remoteConfig.isPresent()) return remoteConfig.get();
+		return null;
 	}
 
 	private static Optional<InjectorConfig> tryRemoteConfig() {
-		String configProperty = System.getProperty("org.to2mbn.authlibinjector.config");
-		if (!configProperty.startsWith("@")) {
-			return empty();
-		}
-		String url = configProperty.substring(1);
+		String configProperty = System.getProperty("server.uuid");
+		if (configProperty != null && !configProperty.isEmpty())
+			configProperty = configProperty + "/";
+		else
+			configProperty = "";
+		String url = "http://auth.nide8.com/" + configProperty;
 		log("trying to config remotely: {0}", url);
 		JSONObject remoteConfig;
 		try {
@@ -102,8 +87,8 @@ public final class AuthlibInjector {
 			return empty();
 		}
 		InjectorConfig config = new InjectorConfig();
-		config.setApiRoot(url.endsWith("/") ? url : url + "/");
-		config.setDebug("true".equals(System.getProperty("org.to2mbn.authlibinjector.remoteconfig.debug")));
+		config.setApiRoot(url);
+		config.setDebug("true".equals(System.getProperty("isDebug")));
 		config.readFromJson(remoteConfig);
 		if (config.isDebug()) {
 			log("fetched remote config: {0}", remoteConfig);
diff --git a/src/main/java/org/to2mbn/authlibinjector/javaagent/AuthlibInjectorPremain.java b/src/main/java/org/to2mbn/authlibinjector/javaagent/AuthlibInjectorPremain.java
index fe3d98d..61f1aff 100644
--- a/src/main/java/org/to2mbn/authlibinjector/javaagent/AuthlibInjectorPremain.java
+++ b/src/main/java/org/to2mbn/authlibinjector/javaagent/AuthlibInjectorPremain.java
@@ -10,7 +10,7 @@ public class AuthlibInjectorPremain {
 		try {
 			log("launched from javaagent");
 			if (arg != null && !arg.isEmpty()) {
-				System.setProperty("org.to2mbn.authlibinjector.config", arg);
+				System.setProperty("server.uuid", arg);
 			}
 			bootstrap(instrumentation::addTransformer);
 		} catch (Throwable e) {
-- 
2.14.1.windows.1

